using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using Hearthstone_Deck_Tracker.Hearthstone;
using Hearthstone_Deck_Tracker.Utility;
using Hearthstone_Deck_Tracker.Utility.MVVM;

namespace Hearthstone_Deck_Tracker.FlyoutControls.DeckExport
{
	public class DeckExportViewModel : ViewModel
	{
		private Deck _deck;
		private string _deckString;
		private string _copyAllButtonText;
		private string _copyCodeButtonText;
		private const string LocCopyAll = "DeckExport_Button_CopyAll";
		private const string LocCopyCode = "DeckExport_Button_CopyCode";
		private const string LocCopied = "DeckExport_Button_Copied";

		public DeckExportViewModel()
		{
			CopyAllButtonText = LocUtil.Get(LocCopyAll, true);
			CopyCodeButtonText = LocUtil.Get(LocCopyCode, true);
		}

		public Deck Deck
		{
			get => _deck;
			set
			{
				_deck = value;
				DeckString = DeckSerializer.Serialize(value);
				OnPropertyChanged();
			}
		}

		public string DeckString
		{
			get => BuildFullDeckString(_deckString);
			set
			{
				_deckString = value;
				OnPropertyChanged();
			}
		}

		public string CopyAllButtonText
		{
			get => _copyAllButtonText; set
			{
				_copyAllButtonText = value;
				OnPropertyChanged();
			}
		}

		public string CopyCodeButtonText
		{
			get => _copyCodeButtonText; set
			{
				_copyCodeButtonText = value;
				OnPropertyChanged();
			}
		}

		public ICommand CopyAllCommand => new Command(CopyAll);

		public ICommand CopyCodeCommand => new Command(CopyCode);

		public async void CopyAll()
		{
			if(Deck == null)
				return;
			Clipboard.SetText(DeckString);
			CopyAllButtonText = LocUtil.Get(LocCopied, true);
			await Task.Delay(2000);
			CopyAllButtonText = LocUtil.Get(LocCopyAll, true);
		}

		public async void CopyCode()
		{
			if(Deck == null)
				return;
			Clipboard.SetText(_deckString);
			CopyCodeButtonText = LocUtil.Get(LocCopied, true);
			await Task.Delay(2000);
			CopyCodeButtonText = LocUtil.Get(LocCopyCode, true);
		}

		public string BuildFullDeckString(string deckString)
		{
			if(_deck == null)
				return deckString;

			var sb = new StringBuilder();
			sb.AppendLine($"### {(string.IsNullOrEmpty(_deck.Name) ? Deck.Class + " Deck" : Deck.Name)}");
			sb.AppendLine($"# Class: {_deck.Class}");
			sb.AppendLine($"# Format: {(_deck.IsWildDeck ? "Wild" : "Standard")}");
			sb.AppendLine("#");
			foreach(var card in _deck.Cards.OrderBy(x => x.Cost).ThenBy(x => x.Name))
				sb.AppendLine($"# {card.Count}x ({card.Cost}) {card.Name}");
			sb.AppendLine("#");
			sb.AppendLine(deckString);
			sb.AppendLine("#");
			sb.AppendLine("# To use this deck, copy it to your clipboard and create a new deck in Hearthstone");
			sb.AppendLine("# Generated by HDT - https://hsdecktracker.net");
			return sb.ToString();
		}
	}
}